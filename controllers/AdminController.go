package controllers

import (
	"fmt"
	"gin-mvc/database"
	"gin-mvc/models"
	"gin-mvc/redis"
	"gin-mvc/utils"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"log"
	"net/http"
	"time"
)

type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func Login(c *gin.Context) {
	var input LoginRequest
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
		return
	}

	var user models.User
	if err := database.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Email kh√¥ng t·ªìn t·∫°i"})
		return
	}

	// So s√°nh password
	err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password))
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"})
		return
	}

	// T·∫°o token JWT
	token, err := utils.GenerateJWT(uint(user.ID), user.Email, user.Name)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng t·∫°o ƒë∆∞·ª£c token"})
		return
	}

	redisKey := fmt.Sprintf("token:%d", user.ID)
	err = redis.Rdb.Set(redis.Ctx, redisKey, token, time.Hour*1).Err() // TTL = 1 gi·ªù
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng l∆∞u ƒë∆∞·ª£c token v√†o Redis"})
		return
	}
	log.Println("üîê Token ƒë√£ l∆∞u Redis:", redisKey, token)

	utils.LogInfo(fmt.Sprintf("Login success - Email: %s, UserID: %d", user.Email, user.ID))
	c.JSON(http.StatusOK, gin.H{
		"message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
		"token":   token,
	})
}

type ResetRequest struct {
	Email string `json:"email"`
}

func ResetPassword(c *gin.Context) {
	var input ResetRequest
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
		return
	}
	var user models.User
	if err := database.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Email kh√¥ng t·ªìn t·∫°i"})
		return
	}
	newPassword := "123456"
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ m√° h√≥a m·∫≠t kh·∫©u"})
		return
	}
	user.Password = string(hashedPassword)
	user.TimeUpdated = int(time.Now().Unix())
	if err := database.DB.Save(&user).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u"})
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"message": "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ 123456",
	})

}

type ChangePasswordRequest struct {
	Email           string `json:"email"`
	NewPassword     string `json:"new_password"`
	ConfirmPassword string `json:"confirm_password"`
}

func ChangePassword(c *gin.Context) {
	var input ChangePasswordRequest
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
		return
	}
	var user models.User
	if err := database.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Email kh√¥ng t·ªìn t·∫°i"})
		return
	}
	if input.NewPassword != input.ConfirmPassword {
		c.JSON(http.StatusBadRequest, gin.H{"error": "X√°c nh√¢n m·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp"})
		return
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.NewPassword), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ m√£ h√≥a m·∫≠t kh·∫©u m·ªõi"})
		return
	}

	user.Password = string(hashedPassword)
	user.TimeUpdated = int(time.Now().Unix())

	if err := database.DB.Save(&user).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"})

}
